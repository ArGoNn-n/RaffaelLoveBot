import os
import asyncio
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler
from telegram import Update
from pymongo import MongoClient
from dotenv import load_dotenv

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
NAME, AGE, CITY, INTERESTS = range(4)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram
app = Application.builder().token(TELEGRAM_TOKEN).build()

async def start(update: Update, context):
    await update.message.reply_text("–í—ñ—Ç–∞—é –≤ RaffaelLove! üòä –ù–∞–ø–∏—à–∏ /profile, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É.")
    return None

async def profile_start(update: Update, context):
    await update.message.reply_text("–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
    return NAME

async def get_name(update: Update, context):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")
    return AGE

async def get_age(update: Update, context):
    try:
        context.user_data["age"] = int(update.message.text)
        await update.message.reply_text("–ó —è–∫–æ–≥–æ —Ç–∏ –º—ñ—Å—Ç–∞?")
        return CITY
    except ValueError:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return AGE

async def get_city(update: Update, context):
    context.user_data["city"] = update.message.text
    await update.message.reply_text("–Ø–∫—ñ —Ç–≤–æ—ó —ñ–Ω—Ç–µ—Ä–µ—Å–∏?")
    return INTERESTS

async def get_interests(update: Update, context):
    context.user_data["interests"] = update.message.text
    user_data = {
        "user_id": update.effective_user.id,
        "name": context.user_data["name"],
        "age": context.user_data["age"],
        "city": context.user_data["city"],
        "interests": context.user_data["interests"]
    }

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ MongoDB
    client = MongoClient(MONGO_URI)
    db = client["RaffaelLove"]
    collection = db["users"]
    collection.update_one({"user_id": user_data["user_id"]}, {"$set": user_data}, upsert=True)

    await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞! –ù–∞–ø–∏—à–∏ /find, —â–æ–± –∑–Ω–∞–π—Ç–∏ –ø–∞—Ä—É.")
    return ConversationHandler.END

async def find(update: Update, context):
    client = MongoClient(MONGO_URI)
    db = client["RaffaelLove"]
    collection = db["users"]
    users = list(collection.find({"user_id": {"$ne": update.effective_user.id}}))
    
    if users:
        other_user = users[0]
        await update.message.reply_text(
            f"–ó–Ω–∞–π–¥–µ–Ω–æ: {other_user['name']}, {other_user['age']} —Ä–æ–∫—ñ–≤, {other_user['city']}, —ñ–Ω—Ç–µ—Ä–µ—Å–∏: {other_user['interests']}"
        )
    else:
        await update.message.reply_text("–ü–æ–∫–∏ –Ω–µ–º–∞—î —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. üòî")
    
    return None

async def cancel(update: Update, context):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# –û–±—Ä–æ–±–Ω–∏–∫–∏
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("profile", profile_start)],
    states={
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
        CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_city)],
        INTERESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_interests)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(CommandHandler("start", start))
app.add_handler(conv_handler)
app.add_handler(CommandHandler("find", find))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    await app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π event loop
    loop = asyncio.get_event_loop()
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ main —É –ø–æ—Ç–æ—á–Ω–æ–º—É —Ü–∏–∫–ª—ñ
    loop.create_task(main())
    # –¢—Ä–∏–º–∞—î–º–æ —Ü–∏–∫–ª –∞–∫—Ç–∏–≤–Ω–∏–º
    loop.run_forever()